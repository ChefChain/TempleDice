import React, { ReactNode } from 'react';
import { HeaderProps } from '../header';
import { MessageEditorProps } from '../messageEditor';
import { MsgListProps } from './MessageList';
import { CurrentConversation } from 'module/store/ConversationStore';
export interface ChatProps {
    prefix?: string;
    className?: string;
    style?: React.CSSProperties;
    threadModalStyle?: React.CSSProperties;
    renderHeader?: (cvs: {
        chatType: 'singleChat' | 'groupChat';
        conversationId: string;
        name?: string;
        unreadCount?: number;
    }) => ReactNode;
    renderMessageList?: () => ReactNode;
    renderMessageEditor?: () => ReactNode;
    renderEmpty?: () => ReactNode;
    headerProps?: {
        avatar: ReactNode;
        onAvatarClick?: () => void;
        moreAction?: HeaderProps['moreAction'];
    };
    messageListProps?: MsgListProps;
    messageEditorProps?: MessageEditorProps;
    rtcConfig?: {
        appId: string;
        agoraUid: string | number;
        onInvite?: (data: {
            channel: string;
            conversation: CurrentConversation;
        }) => Promise<[{
            name: string;
            id: string;
            avatarurl?: string;
        }]>;
        onAddPerson?: (data: {
            channel: string;
        }) => Promise<[{
            member: string;
        } | {
            owner: string;
        }]>;
        getIdMap?: (data: {
            userId: string;
            channel: string;
        }) => Promise<{
            [key: string]: string;
        }>;
        onStateChange?: (data: {
            type: string;
            confr: any;
        }) => void;
        getRTCToken?: (data: {
            channel: number | string;
            chatUserId: string;
        }) => Promise<{
            agoraUid: string | number;
            accessToken: string;
        }>;
    };
}
declare const _default: React.FunctionComponent<ChatProps>;
export default _default;
